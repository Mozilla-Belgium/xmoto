// Generated by CoffeeScript 1.6.3
(function() {
  var Assets, Blocks, Constants, Edges, EngineSound, Entities, Ghost, Infos, Input, LayerOffsets, Level, Limits, Listeners, Math2D, Moto, MotoFlip, Physics, Replay, Rider, Script, Sky, Theme, b2AABB, b2Body, b2BodyDef, b2CircleShape, b2DebugDraw, b2Fixture, b2FixtureDef, b2MassData, b2MouseJointDef, b2PolygonShape, b2PrismaticJointDef, b2RevoluteJointDef, b2Settings, b2Vec2, b2World, hide_loading, play_level, position_2d, show_loading, sort_blocks_by_texture, triangulate;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  Constants = (function() {
    function Constants() {}

    Constants.gravity = 9.81;

    Constants.body = {
      density: 1.5,
      restitution: 0.5,
      friction: 1.0,
      position: {
        x: 0.0,
        y: 1.0
      },
      collision_box: [new b2Vec2(0.4, -0.3), new b2Vec2(0.56, 0.45), new b2Vec2(-0.83, 0.2), new b2Vec2(-0.35, -0.3)]
    };

    Constants.wheels = {
      density: 2.0,
      restitution: 0.5,
      friction: 1.3,
      position: {
        x: 0.70,
        y: 0.48
      }
    };

    Constants.left_axle = {
      density: 1.0,
      restitution: 0.5,
      friction: 1.0,
      position: {
        x: 0.0,
        y: 1.0
      },
      collision_box: [new b2Vec2(-0.10, -0.30), new b2Vec2(-0.25, -0.30), new b2Vec2(-0.80, -0.58), new b2Vec2(-0.65, -0.58)]
    };

    Constants.right_axle = {
      density: 1.5,
      restitution: 0.5,
      friction: 1.0,
      position: {
        x: 0.0,
        y: 1.0
      },
      collision_box: [new b2Vec2(0.58, -0.02), new b2Vec2(0.48, -0.02), new b2Vec2(0.66, -0.58), new b2Vec2(0.76, -0.58)]
    };

    Constants.left_suspension = {
      angle: new b2Vec2(0, 1),
      lower_translation: -0.03,
      upper_translation: 0.20
    };

    Constants.right_suspension = {
      angle: new b2Vec2(-0.2, 1),
      lower_translation: 0.00,
      upper_translation: 0.20
    };

    Constants.torso = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.24,
        y: 1.87
      },
      collision_box: [new b2Vec2(0.16, -0.575), new b2Vec2(0.23, 0.50), new b2Vec2(-0.20, 0.48), new b2Vec2(-0.17, -0.575)],
      angle: -Math.PI / 20.0
    };

    Constants.lower_leg = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: 0.15,
        y: 0.90
      },
      collision_box: [new b2Vec2(0.2, -0.33), new b2Vec2(0.2, -0.27), new b2Vec2(0.00, -0.2), new b2Vec2(0.02, 0.33), new b2Vec2(-0.17, 0.33), new b2Vec2(-0.14, -0.33)],
      angle: -Math.PI / 6.0
    };

    Constants.upper_leg = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.09,
        y: 1.27
      },
      collision_box: [new b2Vec2(0.4, -0.14), new b2Vec2(0.4, 0.07), new b2Vec2(-0.4, 0.14), new b2Vec2(-0.4, -0.08)],
      angle: -Math.PI / 12.0
    };

    Constants.lower_arm = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: 0.07,
        y: 1.52
      },
      collision_box: [new b2Vec2(0.28, -0.055), new b2Vec2(0.28, 0.055), new b2Vec2(-0.28, 0.08), new b2Vec2(-0.28, -0.05)],
      angle: -Math.PI / 10.0
    };

    Constants.upper_arm = {
      density: 0.4,
      restitution: 0.0,
      friction: 1.0,
      position: {
        x: -0.17,
        y: 1.83
      },
      collision_box: [new b2Vec2(0.09, -0.26), new b2Vec2(0.09, 0.26), new b2Vec2(-0.11, 0.26), new b2Vec2(-0.11, -0.26)],
      angle: Math.PI / 9.0
    };

    Constants.ankle = {
      axe_position: {
        x: -0.2,
        y: -0.2
      }
    };

    Constants.wrist = {
      axe_position: {
        x: 0.25,
        y: -0.07
      }
    };

    Constants.knee = {
      axe_position: {
        x: 0.07,
        y: 0.28
      }
    };

    Constants.elbow = {
      axe_position: {
        x: 0.05,
        y: -0.2
      }
    };

    Constants.shoulder = {
      axe_position: {
        x: -0.12,
        y: 0.22
      }
    };

    Constants.hip = {
      axe_position: {
        x: -0.27,
        y: 0.10
      }
    };

    return Constants;

  })();

  EngineSound = (function() {
    function EngineSound(level) {}

    return EngineSound;

  })();

  Input = (function() {
    function Input(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Input.prototype.init = function() {
      this.disable_scroll();
      return this.init_keyboard();
    };

    Input.prototype.disable_scroll = function() {
      var keydown, keys, preventDefault;
      keys = [37, 38, 39, 40, 32];
      preventDefault = function(e) {
        e = e || window.event;
        if (e.preventDefault) {
          e.preventDefault();
        }
        return e.returnValue = false;
      };
      keydown = function(e) {
        var i, _i, _len;
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          i = keys[_i];
          if (e.keyCode === i) {
            preventDefault(e);
            return;
          }
        }
      };
      return document.onkeydown = keydown;
    };

    Input.prototype.init_keyboard = function() {
      var _this = this;
      window.addEventListener('deviceorientation', function(event) {
        if (event.beta > 12) {
          _this.left = true;
          _this.right = false;
          return _this.value = Math.min(event.beta, 80);
        } else if (event.beta < -12 && event.beta > -80) {
          _this.right = true;
          _this.left = false;
          return _this.value = Math.max(event.beta, -80);
        } else {
          _this.right = false;
          return _this.left = false;
        }
      });
      $("#left").on("touchstart", function() {
        return _this.up = true;
      });
      $("#left").on("touchend", function() {
        return _this.up = false;
      });
      $("#right").on("touchstart", function() {
        return _this.down = true;
      });
      $("#right").on("touchend", function() {
        return _this.down = false;
      });
      $("#debug").on("touchstart", function() {
        return _this.level.restart();
      });
      $(document).off('keydown');
      $(document).on('keydown', function(event) {
        switch (event.which || event.keyCode) {
          case 38:
            return _this.up = true;
          case 40:
            return _this.down = true;
          case 37:
            return _this.left = true;
          case 39:
            return _this.right = true;
          case 13:
            return _this.level.restart();
          case 32:
            if (!_this.level.moto.dead) {
              return _this.level.flip_moto();
            }
        }
      });
      return $(document).on('keyup', function(event) {
        switch (event.which || event.keyCode) {
          case 38:
            return _this.up = false;
          case 40:
            return _this.down = false;
          case 37:
            return _this.left = false;
          case 39:
            return _this.right = false;
        }
      });
    };

    Input.prototype.move_moto = function() {
      var force, moto, rider, v, v_l, v_r;
      force = 24.1;
      moto = this.level.moto;
      rider = moto.rider;
      if (!this.level.moto.dead) {
        if (this.up) {
          moto.left_wheel.ApplyTorque(-moto.mirror * force / 3);
        }
        if (this.down) {
          v_r = moto.right_wheel.GetAngularVelocity();
          moto.right_wheel.ApplyTorque((Math.abs(v_r) >= 0.001 ? -2 * v_r : void 0));
          v_l = moto.left_wheel.GetAngularVelocity();
          moto.left_wheel.ApplyTorque((Math.abs(v_l) >= 0.001 ? -v_l : void 0));
        }
        if (this.left) {
          if (this.value) {
            moto.body.ApplyTorque(this.value / 2.8);
            moto.rider.torso.ApplyTorque(this.value / 2.8);
          } else {
            moto.body.ApplyTorque(force / 3.0);
            moto.rider.torso.ApplyTorque(force / 3.0);
          }
        }
        if (this.right) {
          if (this.value) {
            moto.body.ApplyTorque(this.value / 2.8);
            moto.rider.torso.ApplyTorque(this.value / 2.8);
          } else {
            moto.body.ApplyTorque(-force / 3.0);
            moto.rider.torso.ApplyTorque(-force / 3.0);
          }
        }
      }
      if (!this.up && !this.down) {
        v = moto.left_wheel.GetAngularVelocity();
        this.level.moto.left_wheel.ApplyTorque((Math.abs(v) >= 0.2 ? -v / 10 : void 0));
        v = moto.right_wheel.GetAngularVelocity();
        this.level.moto.right_wheel.ApplyTorque((Math.abs(v) >= 0.2 ? -v / 100 : void 0));
      }
      moto.left_prismatic_joint.SetMaxMotorForce(8 + Math.abs(800 * Math.pow(moto.left_prismatic_joint.GetJointTranslation(), 2)));
      moto.left_prismatic_joint.SetMotorSpeed(-3 * moto.left_prismatic_joint.GetJointTranslation());
      moto.right_prismatic_joint.SetMaxMotorForce(4 + Math.abs(800 * Math.pow(moto.right_prismatic_joint.GetJointTranslation(), 2)));
      return moto.right_prismatic_joint.SetMotorSpeed(-3 * moto.right_prismatic_joint.GetJointTranslation());
    };

    return Input;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  Level = (function() {
    function Level() {
      var canvas;
      canvas = $('#game').get(0);
      this.ctx = canvas.getContext('2d');
      this.scale = {
        x: 30,
        y: -30
      };
      this.assets = new Assets();
      this.physics = new Physics(this);
      this.world = this.physics.world;
      this.input = new Input(this);
      this.listeners = new Listeners(this);
      this.replay = new Replay(this);
      this.ghost = new Ghost(this, null);
      this.moto = new Moto(this);
      this.engine_sound = new EngineSound(this);
      this.infos = new Infos(this);
      this.sky = new Sky(this);
      this.blocks = new Blocks(this);
      this.limits = new Limits(this);
      this.layer_offsets = new LayerOffsets(this);
      this.script = new Script(this);
      this.entities = new Entities(this);
      this.start_time = new Date().getTime();
      this.current_time = 0;
    }

    Level.prototype.load_from_file = function(file_name) {
      var level;
      level = $("#level").text();
      return this.load_level(level);
    };

    Level.prototype.load_level = function(xml) {
      this.infos.parse(xml).init();
      this.sky.parse(xml).init();
      this.blocks.parse(xml).init();
      this.limits.parse(xml).init();
      this.layer_offsets.parse(xml).init();
      this.script.parse(xml).init();
      this.entities.parse(xml).init();
      this.moto.init();
      this.ghost.init();
      this.input.init();
      return this.listeners.init();
    };

    Level.prototype.init_canvas = function() {
      this.canvas = $('#game').get(0);
      this.canvas_width = parseFloat(this.canvas.width);
      this.canvas_height = parseFloat(this.canvas.height);
      return this.ctx.lineWidth = 0.01;
    };

    Level.prototype.display = function(debug) {
      if (debug == null) {
        debug = false;
      }
      if (this.need_to_restart) {
        this.need_to_restart = false;
        this.restart(true);
      }
      this.current_time = new Date().getTime() - this.start_time;
      if (!this.canvas) {
        this.init_canvas();
      }
      this.ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);
      this.ctx.save();
      this.ctx.translate(this.canvas_width / 2, this.canvas_height / 2);
      this.ctx.scale(this.scale.x, this.scale.y);
      this.ctx.translate(-this.moto.position().x, -this.moto.position().y - 0.25);
      this.sky.display(this.ctx);
      this.limits.display(this.ctx);
      this.entities.display_sprites(this.ctx);
      this.blocks.display(this.ctx);
      this.entities.display_items(this.ctx);
      this.moto.display(this.ctx);
      if (this.ghost) {
        this.ghost.display(this.ctx);
      }
      if (debug) {
        this.world.DrawDebugData();
      }
      this.ctx.restore();
      return this.replay.add_frame();
    };

    Level.prototype.flip_moto = function() {
      return this.moto = MotoFlip.execute(this.moto);
    };

    Level.prototype.got_strawberries = function() {
      var strawberry, _i, _len, _ref;
      _ref = this.entities.strawberries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        strawberry = _ref[_i];
        if (strawberry.display) {
          return false;
        }
      }
      return true;
    };

    Level.prototype.restart = function(save_replay) {
      var entity, _i, _len, _ref, _results;
      if (save_replay == null) {
        save_replay = false;
      }
      if (save_replay) {
        if ((!this.ghost.replay) || this.ghost.replay.frames_count() > this.replay.frames_count()) {
          this.ghost = new Ghost(this, this.replay.clone());
        }
      }
      this.ghost.current_frame = 0;
      this.replay = new Replay(this);
      this.moto.destroy();
      this.moto = new Moto(this, false);
      this.moto.init();
      this.start_time = new Date().getTime();
      this.current_time = 0;
      _ref = this.entities.strawberries;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        _results.push(entity.display = true);
      }
      return _results;
    };

    return Level;

  })();

  Blocks = (function() {
    function Blocks(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
      this.back_list = [];
      this.front_list = [];
    }

    Blocks.prototype.parse = function(xml) {
      var block, material, vertex, xml_block, xml_blocks, xml_material, xml_materials, xml_vertex, xml_vertices, _i, _j, _k, _len, _len1, _len2;
      xml_blocks = $(xml).find('block');
      for (_i = 0, _len = xml_blocks.length; _i < _len; _i++) {
        xml_block = xml_blocks[_i];
        block = {
          id: $(xml_block).attr('id'),
          position: {
            x: parseFloat($(xml_block).find('position').attr('x')),
            y: parseFloat($(xml_block).find('position').attr('y')),
            dynamic: $(xml_block).find('position').attr('dynamic') === 'true',
            background: $(xml_block).find('position').attr('background') === 'true'
          },
          usetexture: {
            id: $(xml_block).find('usetexture').attr('id').toLowerCase(),
            scale: parseFloat($(xml_block).find('usetexture').attr('scale'))
          },
          physics: {
            grip: parseFloat($(xml_block).find('physics').attr('grip'))
          },
          edges: {
            angle: parseFloat($(xml_block).find('edges').attr('angle')),
            materials: []
          },
          vertices: []
        };
        if (block.usetexture.id === 'default') {
          block.usetexture.id = 'dirt';
        }
        xml_materials = $(xml_block).find('edges material');
        for (_j = 0, _len1 = xml_materials.length; _j < _len1; _j++) {
          xml_material = xml_materials[_j];
          material = {
            name: $(xml_material).attr('name'),
            edge: $(xml_material).attr('edge'),
            color_r: parseInt($(xml_material).attr('color_r')),
            color_g: parseInt($(xml_material).attr('color_g')),
            color_b: parseInt($(xml_material).attr('color_b')),
            color_a: parseInt($(xml_material).attr('color_a')),
            scale: parseFloat($(xml_material).attr('scale')),
            depth: parseFloat($(xml_material).attr('depth'))
          };
          block.edges.materials.push(material);
        }
        xml_vertices = $(xml_block).find('vertex');
        for (_k = 0, _len2 = xml_vertices.length; _k < _len2; _k++) {
          xml_vertex = xml_vertices[_k];
          vertex = {
            x: parseFloat($(xml_vertex).attr('x')),
            y: parseFloat($(xml_vertex).attr('y')),
            edge: $(xml_vertex).attr('edge') ? $(xml_vertex).attr('edge').toLowerCase() : void 0
          };
          block.vertices.push(vertex);
        }
        this.list.push(block);
        if (block.position.background) {
          this.back_list.push(block);
        } else {
          this.front_list.push(block);
        }
      }
      this.list.sort(sort_blocks_by_texture);
      this.back_list.sort(sort_blocks_by_texture);
      this.front_list.sort(sort_blocks_by_texture);
      return this;
    };

    Blocks.prototype.init = function() {
      var block, triangle, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        this.assets.textures.push(block.usetexture.id);
      }
      this.triangles = triangulate(this.front_list);
      _ref1 = this.triangles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        triangle = _ref1[_j];
        this.level.physics.create_polygon(triangle, 'ground');
      }
      return this.edges = new Edges(this.level, this.list);
    };

    Blocks.prototype.display = function(ctx) {
      var block, i, vertex, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.back_list.concat(this.front_list);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        ctx.beginPath();
        _ref1 = block.vertices;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          vertex = _ref1[i];
          if (i === 0) {
            ctx.moveTo(block.position.x + vertex.x, block.position.y + vertex.y);
          } else {
            ctx.lineTo(block.position.x + vertex.x, block.position.y + vertex.y);
          }
        }
        ctx.closePath();
        ctx.save();
        ctx.scale(1.0 / this.level.scale.x, 1.0 / this.level.scale.y);
        ctx.fillStyle = ctx.createPattern(this.assets.get(block.usetexture.id), 'repeat');
        ctx.fill();
        ctx.restore();
      }
      return this.edges.display(ctx);
    };

    return Blocks;

  })();

  triangulate = function(blocks) {
    var block, set_of_triangles, triangle, triangles, triangulation, vertex, vertices, _i, _j, _k, _len, _len1, _len2, _ref;
    triangles = [];
    for (_i = 0, _len = blocks.length; _i < _len; _i++) {
      block = blocks[_i];
      vertices = [];
      _ref = block.vertices;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        vertex = _ref[_j];
        vertices.push(new poly2tri.Point(block.position.x + vertex.x, block.position.y + vertex.y));
      }
      Math2D.not_collinear_vertices(vertices);
      triangulation = new poly2tri.SweepContext(vertices, {
        cloneArrays: true
      });
      triangulation.triangulate();
      set_of_triangles = triangulation.getTriangles();
      for (_k = 0, _len2 = set_of_triangles.length; _k < _len2; _k++) {
        triangle = set_of_triangles[_k];
        triangles.push([
          {
            x: triangle.points_[0].x,
            y: triangle.points_[0].y
          }, {
            x: triangle.points_[1].x,
            y: triangle.points_[1].y
          }, {
            x: triangle.points_[2].x,
            y: triangle.points_[2].y
          }
        ]);
      }
    }
    return triangles;
  };

  sort_blocks_by_texture = function(a, b) {
    if (a.usetexture.id > b.usetexture.id) {
      return 1;
    }
    if (a.usetexture.id <= b.usetexture.id) {
      return -1;
    }
    return 0;
  };

  Edges = (function() {
    function Edges(level, blocks) {
      var block, edge, i, vertex, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      this.level = level;
      this.assets = this.level.assets;
      this.theme = this.assets.theme;
      this.blocks = blocks;
      this.list = [];
      _ref = this.blocks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        _ref1 = block.vertices;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          vertex = _ref1[_j];
          if (vertex.edge) {
            this.assets.effects.push(this.theme.edge_params(vertex.edge).file);
          }
        }
      }
      _ref2 = this.blocks;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        block = _ref2[_k];
        _ref3 = block.vertices;
        for (i = _l = 0, _len3 = _ref3.length; _l < _len3; i = ++_l) {
          vertex = _ref3[i];
          if (vertex.edge) {
            edge = {
              vertex1: vertex,
              vertex2: i === block.vertices.length - 1 ? block.vertices[0] : block.vertices[i + 1],
              block: block,
              texture: vertex.edge,
              theme: this.theme.edge_params(vertex.edge)
            };
            edge.angle = Math2D.angle_between_points(edge.vertex1, edge.vertex2) - Math.PI / 2;
            this.list.push(edge);
          }
        }
      }
    }

    Edges.prototype.display = function(ctx) {
      var edge, _i, _len, _ref, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        edge = _ref[_i];
        ctx.beginPath();
        ctx.moveTo(edge.block.position.x + edge.vertex1.x, edge.block.position.y + edge.vertex1.y - edge.theme.depth);
        ctx.lineTo(edge.block.position.x + edge.vertex2.x, edge.block.position.y + edge.vertex2.y - edge.theme.depth);
        ctx.lineTo(edge.block.position.x + edge.vertex2.x, edge.block.position.y + edge.vertex2.y);
        ctx.lineTo(edge.block.position.x + edge.vertex1.x, edge.block.position.y + edge.vertex1.y);
        ctx.closePath();
        ctx.save();
        ctx.translate(edge.block.position.x + edge.vertex1.x, edge.block.position.y + edge.vertex1.y);
        ctx.rotate(edge.angle);
        ctx.scale(1.0 / 100, -1.0 / 100);
        ctx.fillStyle = ctx.createPattern(this.assets.get(edge.theme.file), 'repeat');
        ctx.fill();
        _results.push(ctx.restore());
      }
      return _results;
    };

    return Edges;

  })();

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  Entities = (function() {
    function Entities(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
      this.strawberries = [];
    }

    Entities.prototype.parse = function(xml) {
      var entity, param, sprite, texture_name, xml_entities, xml_entity, xml_param, xml_params, _i, _j, _len, _len1;
      xml_entities = $(xml).find('entity');
      for (_i = 0, _len = xml_entities.length; _i < _len; _i++) {
        xml_entity = xml_entities[_i];
        entity = {
          id: $(xml_entity).attr('id'),
          type_id: $(xml_entity).attr('typeid'),
          size: {
            r: parseFloat($(xml_entity).find('size').attr('r')),
            width: parseFloat($(xml_entity).find('size').attr('width')),
            height: parseFloat($(xml_entity).find('size').attr('height'))
          },
          position: {
            x: parseFloat($(xml_entity).find('position').attr('x')),
            y: parseFloat($(xml_entity).find('position').attr('y')),
            angle: parseFloat($(xml_entity).find('position').attr('angle'))
          },
          params: []
        };
        xml_params = $(xml_entity).find('param');
        for (_j = 0, _len1 = xml_params.length; _j < _len1; _j++) {
          xml_param = xml_params[_j];
          param = {
            name: $(xml_param).attr('name'),
            value: $(xml_param).attr('value').toLowerCase()
          };
          entity.params.push(param);
        }
        texture_name = Entities.texture_name(entity);
        if (texture_name) {
          sprite = this.assets.theme.sprite_params(texture_name);
          if (!entity.size.width) {
            entity.size.width = sprite.size.width;
          }
          if (!entity.size.height) {
            entity.size.height = sprite.size.height;
          }
          entity.center = {
            x: sprite.center.x,
            y: sprite.center.y
          };
          if (!entity.center.x) {
            entity.center.x = entity.size.width / 2;
          }
          if (!entity.center.y) {
            entity.center.y = entity.size.height / 2;
          }
          entity.delay = sprite.delay;
          entity.frames = sprite.frames;
          entity.display = true;
        }
        this.list.push(entity);
      }
      return this;
    };

    Entities.prototype.init = function() {
      var entity, i, texture_name, _i, _j, _len, _ref, _ref1, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        texture_name = Entities.texture_name(entity);
        if (texture_name) {
          if (entity.frames === 0) {
            this.assets.anims.push(texture_name);
          } else {
            for (i = _j = 0, _ref1 = entity.frames - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
              this.assets.anims.push(Entities.frame_name(texture_name, i));
            }
          }
        }
        if (entity.type_id === 'EndOfLevel') {
          this.create_entity(entity, 'end_of_level');
          _results.push(this.end_of_level = entity);
        } else if (entity.type_id === 'Strawberry') {
          this.create_entity(entity, 'strawberry');
          _results.push(this.strawberries.push(entity));
        } else if (entity.type_id === 'PlayerStart') {
          _results.push(this.player_start = {
            x: entity.position.x,
            y: entity.position.y
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.create_entity = function(entity, name) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(entity.size.r);
      fixDef.isSensor = true;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = entity.position.x;
      bodyDef.position.y = entity.position.y;
      bodyDef.userData = {
        name: name,
        entity: entity
      };
      bodyDef.type = b2Body.b2_staticBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Entities.prototype.display_sprites = function(ctx) {
      var entity, _i, _len, _ref, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.type_id === 'Sprite') {
          _results.push(this.display_entity(ctx, entity));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.display_items = function(ctx) {
      var entity, _i, _len, _ref, _results;
      _ref = this.list;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.type_id === 'EndOfLevel' || entity.type_id === "Strawberry") {
          _results.push(this.display_entity(ctx, entity));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Entities.prototype.display_entity = function(ctx, entity) {
      var i, texture_name;
      if (entity.display) {
        texture_name = Entities.texture_name(entity);
        if (entity.frames) {
          i = this.level.current_time % (entity.frames * entity.delay * 1000);
          i = Math.floor(i / (entity.delay * 1000));
          if (entity.frames) {
            texture_name = Entities.frame_name(texture_name, i);
          }
        }
        ctx.save();
        ctx.translate(entity.position.x, entity.position.y);
        ctx.scale(1, -1);
        ctx.drawImage(this.assets.get(texture_name), -entity.size.width + entity.center.x, -entity.size.height + entity.center.y, entity.size.width, entity.size.height);
        return ctx.restore();
      }
    };

    Entities.texture_name = function(entity) {
      var param, _i, _len, _ref;
      if (entity.type_id === 'Sprite') {
        _ref = entity.params;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          param = _ref[_i];
          if (param.name === 'name') {
            return param.value;
          }
        }
      } else if (entity.type_id === 'EndOfLevel') {
        return 'checkball';
      } else if (entity.type_id === 'Strawberry') {
        return 'cog2';
      }
    };

    Entities.frame_name = function(texture_name, frame_number) {
      return ("" + texture_name + "_") + (frame_number / 100.0).toFixed(2).toString().substring(2);
    };

    return Entities;

  })();

  Infos = (function() {
    function Infos(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Infos.prototype.parse = function(xml) {
      var xml_border, xml_infos, xml_level, xml_music;
      xml_level = $(xml).find('level');
      this.identifier = xml_level.attr('id');
      this.pack_name = xml_level.attr('levelpack');
      this.pack_id = xml_level.attr('levelpackNum');
      this.r_version = xml_level.attr('rversion');
      xml_infos = $(xml).find('level').find('info');
      this.name = xml_infos.find('name').text();
      this.description = xml_infos.find('description').text();
      this.author = xml_infos.find('author').text();
      this.date = xml_infos.find('date').text();
      xml_border = xml_infos.find('border');
      this.border = xml_border.attr('texture');
      xml_music = xml_infos.find('music');
      this.music = xml_music.attr('name');
      return this;
    };

    Infos.prototype.init = function() {};

    Infos.prototype.display = function(ctx) {};

    return Infos;

  })();

  LayerOffsets = (function() {
    function LayerOffsets(level) {
      this.level = level;
      this.assets = level.assets;
      this.list = [];
    }

    LayerOffsets.prototype.parse = function(xml) {
      var layer_offset, xml_layer_offset, xml_layer_offsets, _i, _len;
      xml_layer_offsets = $(xml).find('layeroffsets layeroffset');
      for (_i = 0, _len = xml_layer_offsets.length; _i < _len; _i++) {
        xml_layer_offset = xml_layer_offsets[_i];
        layer_offset = {
          x: parseFloat($(xml_layer_offset).attr('x')),
          y: parseFloat($(xml_layer_offset).attr('y')),
          front_layer: $(xml_layer_offset).attr('frontlayer')
        };
        this.list.push(layer_offset);
      }
      return this;
    };

    LayerOffsets.prototype.init = function() {};

    LayerOffsets.prototype.display = function(ctx) {};

    return LayerOffsets;

  })();

  Limits = (function() {
    function Limits(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Limits.prototype.parse = function(xml) {
      var xml_limits;
      xml_limits = $(xml).find('limits');
      this.screen = {
        left: parseFloat(xml_limits.attr('left')) * 2,
        right: parseFloat(xml_limits.attr('right')) * 2,
        top: parseFloat(xml_limits.attr('top')) * 2,
        bottom: parseFloat(xml_limits.attr('bottom')) * 2
      };
      this.player = {
        left: parseFloat(xml_limits.attr('left')),
        right: parseFloat(xml_limits.attr('right')),
        top: parseFloat(xml_limits.attr('top')),
        bottom: parseFloat(xml_limits.attr('bottom'))
      };
      this.size = {
        x: this.screen.right - this.screen.left,
        y: this.screen.top - this.screen.bottom
      };
      return this;
    };

    Limits.prototype.init = function() {
      var vertices;
      this.assets.textures.push('dirt');
      vertices = [];
      vertices.push({
        x: this.screen.left,
        y: this.screen.top * 5
      });
      vertices.push({
        x: this.screen.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.top * 5
      });
      this.level.physics.create_polygon(vertices, 'ground');
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.screen.top * 5
      });
      vertices.push({
        x: this.player.right,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.screen.right,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.screen.right,
        y: this.screen.top * 5
      });
      this.level.physics.create_polygon(vertices, 'ground');
      vertices = [];
      vertices.push({
        x: this.player.right,
        y: this.player.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.player.bottom
      });
      vertices.push({
        x: this.player.left,
        y: this.screen.bottom
      });
      vertices.push({
        x: this.player.right,
        y: this.screen.bottom
      });
      return this.level.physics.create_polygon(vertices, 'ground');
    };

    Limits.prototype.display = function(ctx) {
      ctx.beginPath();
      ctx.moveTo(this.screen.left, this.screen.top);
      ctx.lineTo(this.screen.left, this.screen.bottom);
      ctx.lineTo(this.player.left, this.screen.bottom);
      ctx.lineTo(this.player.left, this.screen.top);
      ctx.closePath();
      this.save_apply_texture_and_restore(ctx);
      ctx.beginPath();
      ctx.moveTo(this.screen.right, this.screen.top);
      ctx.lineTo(this.screen.right, this.screen.bottom);
      ctx.lineTo(this.player.right, this.screen.bottom);
      ctx.lineTo(this.player.right, this.screen.top);
      ctx.closePath();
      this.save_apply_texture_and_restore(ctx);
      ctx.beginPath();
      ctx.moveTo(this.player.right, this.player.bottom);
      ctx.lineTo(this.player.left, this.player.bottom);
      ctx.lineTo(this.player.left, this.screen.bottom);
      ctx.lineTo(this.player.right, this.screen.bottom);
      ctx.closePath();
      return this.save_apply_texture_and_restore(ctx);
    };

    Limits.prototype.save_apply_texture_and_restore = function(ctx) {
      ctx.save();
      ctx.scale(1.0 / this.level.scale.x, 1.0 / this.level.scale.y);
      ctx.fillStyle = ctx.createPattern(this.assets.get('dirt'), "repeat");
      ctx.fill();
      return ctx.restore();
    };

    return Limits;

  })();

  Script = (function() {
    function Script(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Script.prototype.parse = function(xml) {
      var xml_script;
      xml_script = $(xml).find('script');
      this.code = xml_script.text();
      return this;
    };

    Script.prototype.init = function() {};

    Script.prototype.display = function(ctx) {};

    return Script;

  })();

  Sky = (function() {
    function Sky(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Sky.prototype.parse = function(xml) {
      var xml_sky;
      xml_sky = $(xml).find('level info sky');
      this.name = xml_sky.text().toLowerCase();
      this.color_r = parseInt(xml_sky.attr('color_r'));
      this.color_g = parseInt(xml_sky.attr('color_g'));
      this.color_b = parseInt(xml_sky.attr('color_b'));
      this.color_a = parseInt(xml_sky.attr('color_a'));
      this.zoom = parseFloat(xml_sky.attr('zoom'));
      this.offset = parseFloat(xml_sky.attr('offset'));
      if (this.name === '') {
        this.name = 'sky1';
      }
      return this;
    };

    Sky.prototype.init = function() {
      return this.assets.textures.push(this.name);
    };

    Sky.prototype.display = function(ctx) {
      return ctx.drawImage(this.assets.get(this.name), this.level.limits.screen.left, this.level.limits.screen.bottom, this.level.limits.size.x, this.level.limits.size.y);
    };

    return Sky;

  })();

  Listeners = (function() {
    function Listeners(level) {
      this.level = level;
      this.assets = level.assets;
    }

    Listeners.prototype.init = function() {
      var listener,
        _this = this;
      listener = new Box2D.Dynamics.b2ContactListener;
      listener.BeginContact = function(contact) {
        var a, b, entity, moto, strawberry;
        moto = _this.level.moto;
        a = contact.GetFixtureA().GetBody().GetUserData().name;
        b = contact.GetFixtureB().GetBody().GetUserData().name;
        if (!moto.dead) {
          if ((a === 'moto' && b === 'strawberry') ||  (a === 'rider' && b === 'strawberry') ||  (a === 'rider-lower_leg' && b === 'strawberry')) {
            strawberry = a === 'strawberry' ? contact.GetFixtureA() : contact.GetFixtureB();
            entity = strawberry.GetBody().GetUserData().entity;
            if (entity.display) {
              entity.display = false;
            }
          }
          if ((a === 'moto' && b === 'end_of_level') ||  (a === 'rider' && b === 'end_of_level')) {
            if (_this.level.got_strawberries()) {
              return _this.level.need_to_restart = true;
            }
          } else if (a === 'rider' && b === 'ground') {
            moto.dead = true;
            _this.level.world.DestroyJoint(moto.rider.ankle_joint);
            _this.level.world.DestroyJoint(moto.rider.wrist_joint);
            moto.rider.knee_joint.m_lowerAngle = moto.rider.knee_joint.m_lowerAngle * 1.5;
            moto.rider.elbow_joint.m_upperAngle = moto.rider.elbow_joint.m_upperAngle * 1.5;
            moto.rider.shoulder_joint.m_upperAngle = moto.rider.shoulder_joint.m_upperAngle * 1.5;
            return moto.rider.hip_joint.m_lowerAngle = moto.rider.hip_joint.m_lowerAngle * 1.5;
          }
        }
      };
      return this.level.world.SetContactListener(listener);
    };

    return Listeners;

  })();

  play_level = function(name) {
    var go, level;
    level = new Level();
    level.load_from_file(name);
    level.assets.load();
    console.log("assets chargées");
    setTimeout((function() {
      return go();
    }), 3000);
    return go = function() {
      var update;
      update = function() {
        level.input.move_moto();
        level.world.Step(1.0 / 30.0, 20, 20);
        level.world.Step(1.0 / 30.0, 20, 20);
        level.world.ClearForces();
        return level.display(false);
      };
      window.game_loop = setInterval(update, 1000 / 15);
      return hide_loading();
    };
  };

  show_loading = function() {
    return $(".xmoto-loading").show();
  };

  hide_loading = function() {
    return $(".xmoto-loading").hide();
  };

  $(function() {
    window.screen.mozLockOrientation('landscape-primary');
    play_level($("#levels option:selected").val());
    $("#levels").on('change', function() {
      show_loading();
      clearInterval(window.game_loop);
      return play_level($(this).val());
    });
    $("canvas").width($("body").width());
    $("canvas").height($("body").height());
    return window.onresize = function() {
      $("canvas").width($("body").width());
      return $("canvas").height($("body").height());
    };
  });

  Ghost = (function() {
    function Ghost(level, replay) {
      this.level = level;
      this.assets = level.assets;
      this.replay = replay;
      this.current_frame = 0;
    }

    Ghost.prototype.display = function() {
      if (this.replay && this.current_frame < this.replay.frames_count()) {
        this.frame = this.replay.frame(this.current_frame);
        this.mirror = this.frame.mirror ? -1 : 1;
        this.display_left_wheel();
        this.display_right_wheel();
        this.display_body();
        this.display_torso();
        this.display_upper_leg();
        this.display_lower_leg();
        this.display_upper_arm();
        this.display_lower_arm();
        return this.current_frame = this.current_frame + 1;
      }
    };

    Ghost.prototype.init = function() {
      var texture, textures, _i, _len, _results;
      textures = ['ghostbikerbody', 'ghostbikerwheel', 'front_ghost', 'rear_ghost', 'ghostlowerarm', 'ghostlowerleg', 'ghosttorso', 'ghostupperarm', 'ghostupperleg'];
      _results = [];
      for (_i = 0, _len = textures.length; _i < _len; _i++) {
        texture = textures[_i];
        _results.push(this.assets.moto.push(texture));
      }
      return _results;
    };

    Ghost.prototype.display_left_wheel = function() {
      var angle, left_wheel, position, radius;
      radius = 0.35;
      left_wheel = this.frame.left_wheel;
      position = left_wheel.position;
      angle = left_wheel.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.rotate(angle);
      this.level.ctx.drawImage(this.assets.get('ghostbikerwheel'), -radius, -radius, radius * 2, radius * 2);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_right_wheel = function() {
      var angle, position, radius, right_wheel;
      radius = 0.35;
      right_wheel = this.frame.right_wheel;
      position = right_wheel.position;
      angle = right_wheel.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.rotate(angle);
      this.level.ctx.drawImage(this.assets.get('ghostbikerwheel'), -radius, -radius, radius * 2, radius * 2);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_body = function() {
      var angle, body, position;
      body = this.frame.body;
      position = body.position;
      angle = body.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('ghostbikerbody'), -1.0, -0.5, 2.0, 1.0);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_torso = function() {
      var angle, position, torso;
      torso = this.frame.torso;
      position = torso.position;
      angle = torso.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('ghosttorso'), -0.25, -0.575, 0.5, 1.15);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_lower_leg = function() {
      var angle, lower_leg, position;
      lower_leg = this.frame.lower_leg;
      position = lower_leg.position;
      angle = lower_leg.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('ghostlowerleg'), -0.2, -0.33, 0.40, 0.66);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_upper_leg = function() {
      var angle, position, upper_leg;
      upper_leg = this.frame.upper_leg;
      position = upper_leg.position;
      angle = upper_leg.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('ghostupperleg'), -0.40, -0.14, 0.80, 0.28);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_lower_arm = function() {
      var angle, lower_arm, position;
      lower_arm = this.frame.lower_arm;
      position = lower_arm.position;
      angle = lower_arm.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, 1);
      this.level.ctx.rotate(this.mirror * angle);
      this.level.ctx.drawImage(this.assets.get('ghostlowerarm'), -0.28, -0.10, 0.56, 0.20);
      return this.level.ctx.restore();
    };

    Ghost.prototype.display_upper_arm = function() {
      var angle, position, upper_arm;
      upper_arm = this.frame.upper_arm;
      position = upper_arm.position;
      angle = upper_arm.angle;
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('ghostupperarm'), -0.125, -0.28, 0.25, 0.56);
      return this.level.ctx.restore();
    };

    return Ghost;

  })();

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  Moto = (function() {
    function Moto(level, mirror) {
      if (mirror == null) {
        mirror = false;
      }
      this.level = level;
      this.assets = level.assets;
      if (mirror) {
        this.mirror = -1;
      } else {
        this.mirror = 1;
      }
      this.rider = new Rider(level, this);
      this.dead = false;
    }

    Moto.prototype.destroy = function() {
      var world;
      world = this.level.world;
      this.rider.destroy();
      world.DestroyBody(this.body);
      world.DestroyBody(this.left_wheel);
      world.DestroyBody(this.right_wheel);
      world.DestroyBody(this.left_axle);
      world.DestroyBody(this.right_axle);
      world.DestroyJoint(this.left_revolute_joint);
      world.DestroyJoint(this.left_prismatic_joint);
      world.DestroyJoint(this.right_revolute_joint);
      return world.DestroyJoint(this.right_prismatic_joint);
    };

    Moto.prototype.display = function() {
      this.display_wheel(this.left_wheel);
      this.display_wheel(this.right_wheel);
      this.display_left_axle();
      this.display_right_axle();
      this.display_body();
      return this.rider.display();
    };

    Moto.prototype.init = function() {
      var texture, textures, _i, _len;
      textures = ['playerbikerbody', 'playerbikerwheel', 'front1', 'rear1'];
      for (_i = 0, _len = textures.length; _i < _len; _i++) {
        texture = textures[_i];
        this.assets.moto.push(texture);
      }
      this.player_start = this.level.entities.player_start;
      this.body = this.create_body(this.player_start.x + this.mirror * Constants.body.position.x, this.player_start.y + Constants.body.position.y);
      this.left_wheel = this.create_wheel(this.player_start.x - this.mirror * Constants.wheels.position.x, this.player_start.y + Constants.wheels.position.y);
      this.right_wheel = this.create_wheel(this.player_start.x + this.mirror * Constants.wheels.position.x, this.player_start.y + Constants.wheels.position.y);
      this.left_axle = this.create_left_axle(this.player_start.x + this.mirror * Constants.left_axle.position.x, this.player_start.y + Constants.left_axle.position.y);
      this.right_axle = this.create_right_axle(this.player_start.x + this.mirror * Constants.right_axle.position.x, this.player_start.y + Constants.right_axle.position.y);
      this.left_revolute_joint = this.create_left_revolute_joint();
      this.left_prismatic_joint = this.create_left_prismatic_joint();
      this.right_revolute_joint = this.create_right_revolute_joint();
      this.right_prismatic_joint = this.create_right_prismatic_joint();
      return this.rider.init();
    };

    Moto.prototype.position = function() {
      return this.body.GetPosition();
    };

    Moto.prototype.create_body = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.body.density;
      fixDef.restitution = Constants.body.restitution;
      fixDef.friction = Constants.body.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.body.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.userData = {
        name: 'moto'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_wheel = function(x, y) {
      var bodyDef, fixDef, wheel;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2CircleShape(0.35);
      fixDef.density = Constants.wheels.density;
      fixDef.restitution = Constants.wheels.restitution;
      fixDef.friction = Constants.wheels.friction;
      fixDef.filter.groupIndex = -1;
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.userData = {
        name: 'moto'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      wheel = this.level.world.CreateBody(bodyDef);
      wheel.CreateFixture(fixDef);
      return wheel;
    };

    Moto.prototype.create_left_axle = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.left_axle.density;
      fixDef.restitution = Constants.left_axle.restitution;
      fixDef.friction = Constants.left_axle.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.left_axle.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.userData = {
        name: 'moto'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_right_axle = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.right_axle.density;
      fixDef.restitution = Constants.right_axle.restitution;
      fixDef.friction = Constants.right_axle.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.right_axle.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.userData = {
        name: 'moto'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Moto.prototype.create_left_revolute_joint = function() {
      var jointDef;
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.left_axle, this.left_wheel, this.left_wheel.GetWorldCenter());
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_right_revolute_joint = function() {
      var jointDef;
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.right_axle, this.right_wheel, this.right_wheel.GetWorldCenter());
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_left_prismatic_joint = function() {
      var angle, jointDef;
      jointDef = new b2PrismaticJointDef();
      angle = Constants.left_suspension.angle;
      jointDef.Initialize(this.body, this.left_axle, this.left_axle.GetWorldCenter(), new b2Vec2(this.mirror * angle.x, angle.y));
      jointDef.enableLimit = true;
      jointDef.lowerTranslation = Constants.left_suspension.lower_translation;
      jointDef.upperTranslation = Constants.left_suspension.upper_translation;
      jointDef.enableMotor = true;
      jointDef.collideConnected = false;
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.create_right_prismatic_joint = function() {
      var angle, jointDef;
      jointDef = new b2PrismaticJointDef();
      angle = Constants.right_suspension.angle;
      jointDef.Initialize(this.body, this.right_axle, this.right_axle.GetWorldCenter(), new b2Vec2(this.mirror * angle.x, angle.y));
      jointDef.enableLimit = true;
      jointDef.lowerTranslation = Constants.right_suspension.lower_translation;
      jointDef.upperTranslation = Constants.right_suspension.upper_translation;
      jointDef.enableMotor = true;
      jointDef.collideConnected = false;
      return this.level.world.CreateJoint(jointDef);
    };

    Moto.prototype.display_wheel = function(wheel) {
      var angle, position, radius;
      position = wheel.GetPosition();
      radius = wheel.GetFixtureList().GetShape().m_radius;
      angle = wheel.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.rotate(angle);
      this.level.ctx.drawImage(this.assets.get('playerbikerwheel'), -radius, -radius, radius * 2, radius * 2);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_body = function() {
      var angle, position;
      position = this.body.GetPosition();
      angle = this.body.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('playerbikerbody'), -1.0, -0.5, 2.0, 1.0);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_left_axle = function() {
      var angle, axle_thickness, distance, left_axle_adjusted_position, left_axle_position, left_wheel_position;
      axle_thickness = 0.09;
      left_wheel_position = this.left_wheel.GetPosition();
      left_wheel_position = {
        x: left_wheel_position.x - this.mirror * axle_thickness / 2.0,
        y: left_wheel_position.y - 0.025
      };
      left_axle_position = {
        x: -0.17 * this.mirror,
        y: -0.30
      };
      left_axle_adjusted_position = Math2D.rotate_point(left_axle_position, this.body.GetAngle(), this.body.GetPosition());
      distance = Math2D.distance_between_points(left_wheel_position, left_axle_adjusted_position);
      angle = Math2D.angle_between_points(left_axle_adjusted_position, left_wheel_position) + this.mirror * Math.PI / 2;
      this.level.ctx.save();
      this.level.ctx.translate(left_wheel_position.x, left_wheel_position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('rear1'), 0.0, -axle_thickness / 2, distance, axle_thickness);
      return this.level.ctx.restore();
    };

    Moto.prototype.display_right_axle = function() {
      var angle, axle_thickness, distance, right_axle_adjusted_position, right_axle_position, right_wheel_position;
      axle_thickness = 0.07;
      right_wheel_position = this.right_wheel.GetPosition();
      right_wheel_position = {
        x: right_wheel_position.x + this.mirror * axle_thickness / 2.0 - this.mirror * 0.03,
        y: right_wheel_position.y - 0.045
      };
      right_axle_position = {
        x: 0.52 * this.mirror,
        y: 0.025
      };
      right_axle_adjusted_position = Math2D.rotate_point(right_axle_position, this.body.GetAngle(), this.body.GetPosition());
      distance = Math2D.distance_between_points(right_wheel_position, right_axle_adjusted_position);
      angle = Math2D.angle_between_points(right_axle_adjusted_position, right_wheel_position) + this.mirror * Math.PI / 2;
      this.level.ctx.save();
      this.level.ctx.translate(right_wheel_position.x, right_wheel_position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('front1'), 0.0, -axle_thickness / 2, distance, axle_thickness);
      return this.level.ctx.restore();
    };

    return Moto;

  })();

  Replay = (function() {
    function Replay(level) {
      this.level = level;
      this.frames = [];
    }

    Replay.prototype.clone = function() {
      var frame, new_replay, _i, _len, _ref;
      new_replay = new Replay(this.level);
      _ref = this.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        new_replay.frames.push($.extend(true, {}, frame));
      }
      return new_replay;
    };

    Replay.prototype.add_frame = function() {
      var frame, moto, rider;
      moto = this.level.moto;
      rider = this.level.moto.rider;
      frame = {
        mirror: this.level.moto.mirror === -1,
        left_wheel: position_2d(moto.left_wheel),
        right_wheel: position_2d(moto.right_wheel),
        body: position_2d(moto.body),
        torso: position_2d(moto.rider.torso),
        upper_leg: position_2d(moto.rider.upper_leg),
        lower_leg: position_2d(moto.rider.lower_leg),
        upper_arm: position_2d(moto.rider.upper_arm),
        lower_arm: position_2d(moto.rider.lower_arm)
      };
      return this.frames.push(frame);
    };

    Replay.prototype.frames_count = function() {
      return this.frames.length;
    };

    Replay.prototype.frame = function(number) {
      return this.frames[number];
    };

    return Replay;

  })();

  position_2d = function(object) {
    return {
      position: {
        x: object.GetPosition().x,
        y: object.GetPosition().y
      },
      angle: object.GetAngle()
    };
  };

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef;

  b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;

  Rider = (function() {
    function Rider(level, moto) {
      this.level = level;
      this.assets = level.assets;
      this.moto = moto;
      this.mirror = this.moto.mirror;
    }

    Rider.prototype.destroy = function() {
      var world;
      world = this.level.world;
      world.DestroyBody(this.torso);
      world.DestroyBody(this.lower_leg);
      world.DestroyBody(this.upper_leg);
      world.DestroyBody(this.lower_arm);
      world.DestroyBody(this.upper_arm);
      world.DestroyJoint(this.ankle_joint);
      world.DestroyJoint(this.wrist_joint);
      world.DestroyJoint(this.knee_joint);
      world.DestroyJoint(this.elbow_joint);
      world.DestroyJoint(this.shoulder_joint);
      return world.DestroyJoint(this.hip_joint);
    };

    Rider.prototype.display = function() {
      this.display_torso();
      this.display_upper_leg();
      this.display_lower_leg();
      this.display_upper_arm();
      return this.display_lower_arm();
    };

    Rider.prototype.init = function() {
      var texture, textures, _i, _len;
      textures = ['playerlowerarm', 'playerlowerleg', 'playertorso', 'playerupperarm', 'playerupperleg'];
      for (_i = 0, _len = textures.length; _i < _len; _i++) {
        texture = textures[_i];
        this.assets.moto.push(texture);
      }
      this.player_start = this.level.entities.player_start;
      this.torso = this.create_torso(this.player_start.x + this.mirror * Constants.torso.position.x, this.player_start.y + Constants.torso.position.y);
      this.lower_leg = this.create_lower_leg(this.player_start.x + this.mirror * Constants.lower_leg.position.x, this.player_start.y + Constants.lower_leg.position.y);
      this.upper_leg = this.create_upper_leg(this.player_start.x + this.mirror * Constants.upper_leg.position.x, this.player_start.y + Constants.upper_leg.position.y);
      this.lower_arm = this.create_lower_arm(this.player_start.x + this.mirror * Constants.lower_arm.position.x, this.player_start.y + Constants.lower_arm.position.y);
      this.upper_arm = this.create_upper_arm(this.player_start.x + this.mirror * Constants.upper_arm.position.x, this.player_start.y + Constants.upper_arm.position.y);
      this.ankle_joint = this.create_ankle_joint();
      this.wrist_joint = this.create_wrist_joint();
      this.knee_joint = this.create_knee_joint();
      this.elbow_joint = this.create_elbow_joint();
      this.shoulder_joint = this.create_shoulder_joint();
      return this.hip_joint = this.create_hip_joint();
    };

    Rider.prototype.position = function() {
      return this.moto.body.GetPosition();
    };

    Rider.prototype.create_torso = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.torso.density;
      fixDef.restitution = Constants.torso.restitution;
      fixDef.friction = Constants.torso.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.torso.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.angle = this.mirror * Constants.torso.angle;
      bodyDef.userData = {
        name: 'rider'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.create_lower_leg = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.lower_leg.density;
      fixDef.restitution = Constants.lower_leg.restitution;
      fixDef.friction = Constants.lower_leg.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.lower_leg.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.angle = this.mirror * Constants.lower_leg.angle;
      bodyDef.userData = {
        name: 'rider-lower_leg'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.create_upper_leg = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.upper_leg.density;
      fixDef.restitution = Constants.upper_leg.restitution;
      fixDef.friction = Constants.upper_leg.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.upper_leg.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.angle = this.mirror * Constants.upper_leg.angle;
      bodyDef.userData = {
        name: 'rider'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.create_lower_arm = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.lower_arm.density;
      fixDef.restitution = Constants.lower_arm.restitution;
      fixDef.friction = Constants.lower_arm.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.lower_arm.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.angle = this.mirror * Constants.lower_arm.angle;
      bodyDef.userData = {
        name: 'rider'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.create_upper_arm = function(x, y) {
      var body, bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = Constants.upper_arm.density;
      fixDef.restitution = Constants.upper_arm.restitution;
      fixDef.friction = Constants.upper_arm.friction;
      fixDef.filter.groupIndex = -1;
      Physics.create_shape(fixDef, Constants.upper_arm.collision_box, this.mirror === -1);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = x;
      bodyDef.position.y = y;
      bodyDef.angle = this.mirror * Constants.upper_arm.angle;
      bodyDef.userData = {
        name: 'rider'
      };
      bodyDef.type = b2Body.b2_dynamicBody;
      body = this.level.world.CreateBody(bodyDef);
      body.CreateFixture(fixDef);
      return body;
    };

    Rider.prototype.set_joint_commons = function(joint) {
      if (this.mirror === 1) {
        joint.lowerAngle = -Math.PI / 15;
        joint.upperAngle = Math.PI / 180;
      } else if (this.mirror === -1) {
        joint.lowerAngle = -Math.PI / 180;
        joint.upperAngle = Math.PI / 15;
      }
      return joint.enableLimit = true;
    };

    Rider.prototype.create_ankle_joint = function() {
      var axe, jointDef, position;
      position = this.lower_leg.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * Constants.ankle.axe_position.x,
        y: position.y + Constants.ankle.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.lower_leg, this.moto.body, axe);
      this.set_joint_commons(jointDef);
      return this.level.world.CreateJoint(jointDef);
    };

    Rider.prototype.create_knee_joint = function() {
      var axe, jointDef, position;
      position = this.lower_leg.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * Constants.knee.axe_position.x,
        y: position.y + Constants.knee.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.lower_leg, this.upper_leg, axe);
      this.set_joint_commons(jointDef);
      return this.level.world.CreateJoint(jointDef);
    };

    Rider.prototype.create_wrist_joint = function() {
      var axe, jointDef, position;
      position = this.lower_arm.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * Constants.wrist.axe_position.x,
        y: position.y + Constants.wrist.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.lower_arm, this.moto.body, axe);
      this.set_joint_commons(jointDef);
      return this.level.world.CreateJoint(jointDef);
    };

    Rider.prototype.create_elbow_joint = function() {
      var axe, jointDef, position;
      position = this.upper_arm.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * Constants.elbow.axe_position.x,
        y: position.y + Constants.elbow.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.upper_arm, this.lower_arm, axe);
      this.set_joint_commons(jointDef);
      return this.level.world.CreateJoint(jointDef);
    };

    Rider.prototype.create_shoulder_joint = function() {
      var axe, jointDef, position;
      position = this.upper_arm.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * Constants.shoulder.axe_position.x,
        y: position.y + Constants.shoulder.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.torso, this.upper_arm, axe);
      this.set_joint_commons(jointDef);
      return this.level.world.CreateJoint(jointDef);
    };

    Rider.prototype.create_hip_joint = function() {
      var axe, jointDef, position;
      position = this.upper_leg.GetWorldCenter();
      axe = {
        x: position.x + this.mirror * Constants.hip.axe_position.x,
        y: position.y + Constants.hip.axe_position.y
      };
      jointDef = new b2RevoluteJointDef();
      jointDef.Initialize(this.torso, this.upper_leg, axe);
      this.set_joint_commons(jointDef);
      return this.level.world.CreateJoint(jointDef);
    };

    Rider.prototype.display_torso = function() {
      var angle, position;
      position = this.torso.GetPosition();
      angle = this.torso.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('playertorso'), -0.25, -0.575, 0.5, 1.15);
      return this.level.ctx.restore();
    };

    Rider.prototype.display_lower_leg = function() {
      var angle, position;
      position = this.lower_leg.GetPosition();
      angle = this.lower_leg.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('playerlowerleg'), -0.2, -0.33, 0.40, 0.66);
      return this.level.ctx.restore();
    };

    Rider.prototype.display_upper_leg = function() {
      var angle, position;
      position = this.upper_leg.GetPosition();
      angle = this.upper_leg.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('playerupperleg'), -0.40, -0.14, 0.80, 0.28);
      return this.level.ctx.restore();
    };

    Rider.prototype.display_lower_arm = function() {
      var angle, position;
      position = this.lower_arm.GetPosition();
      angle = this.lower_arm.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, 1);
      this.level.ctx.rotate(this.mirror * angle);
      this.level.ctx.drawImage(this.assets.get('playerlowerarm'), -0.28, -0.10, 0.56, 0.20);
      return this.level.ctx.restore();
    };

    Rider.prototype.display_upper_arm = function() {
      var angle, position;
      position = this.upper_arm.GetPosition();
      angle = this.upper_arm.GetAngle();
      this.level.ctx.save();
      this.level.ctx.translate(position.x, position.y);
      this.level.ctx.scale(1 * this.mirror, -1);
      this.level.ctx.rotate(this.mirror * (-angle));
      this.level.ctx.drawImage(this.assets.get('playerupperarm'), -0.125, -0.28, 0.25, 0.56);
      return this.level.ctx.restore();
    };

    return Rider;

  })();

  b2World = Box2D.Dynamics.b2World;

  b2Vec2 = Box2D.Common.Math.b2Vec2;

  b2AABB = Box2D.Collision.b2AABB;

  b2BodyDef = Box2D.Dynamics.b2BodyDef;

  b2Body = Box2D.Dynamics.b2Body;

  b2FixtureDef = Box2D.Dynamics.b2FixtureDef;

  b2Fixture = Box2D.Dynamics.b2Fixture;

  b2MassData = Box2D.Collision.Shapes.b2MassData;

  b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;

  b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;

  b2DebugDraw = Box2D.Dynamics.b2DebugDraw;

  b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef;

  b2Settings = Box2D.Common.b2Settings;

  Physics = (function() {
    function Physics(level) {
      var context, debugDraw;
      this.scale = level.scale.x;
      this.level = level;
      this.world = new b2World(new b2Vec2(0, -Constants.gravity), true);
      b2Settings.b2_linearSlop = 0.0025;
      context = this.level.ctx;
      debugDraw = new b2DebugDraw();
      debugDraw.SetSprite(context);
      debugDraw.SetFillAlpha(0.3);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      this.world.SetDebugDraw(debugDraw);
      this.world;
    }

    Physics.prototype.create_polygon = function(vertices, name) {
      var bodyDef, fixDef;
      fixDef = new b2FixtureDef();
      fixDef.shape = new b2PolygonShape();
      fixDef.density = 1.0;
      fixDef.restitution = 0.5;
      fixDef.friction = 1.0;
      Physics.create_shape(fixDef, vertices);
      bodyDef = new b2BodyDef();
      bodyDef.position.x = 0;
      bodyDef.position.y = 0;
      bodyDef.userData = {
        name: name
      };
      bodyDef.type = b2Body.b2_staticBody;
      return this.world.CreateBody(bodyDef).CreateFixture(fixDef);
    };

    Physics.create_shape = function(fix_def, collision_box, mirror) {
      var b2vertices, vertex, _i, _j, _len, _len1;
      if (mirror == null) {
        mirror = false;
      }
      b2vertices = [];
      if (mirror === false) {
        for (_i = 0, _len = collision_box.length; _i < _len; _i++) {
          vertex = collision_box[_i];
          b2vertices.push(new b2Vec2(vertex.x, vertex.y));
        }
      } else {
        for (_j = 0, _len1 = collision_box.length; _j < _len1; _j++) {
          vertex = collision_box[_j];
          b2vertices.unshift(new b2Vec2(-vertex.x, vertex.y));
        }
      }
      return fix_def.shape.SetAsArray(b2vertices);
    };

    return Physics;

  })();

  Assets = (function() {
    function Assets() {
      this.queue = new createjs.LoadQueue();
      this.theme = new Theme('modern.xml');
      this.textures = [];
      this.anims = [];
      this.effects = [];
      this.moto = [];
      this.sounds = [];
    }

    Assets.prototype.load = function() {
      var item, items, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      items = [];
      _ref = this.textures;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        items.push({
          id: item,
          src: "data/Textures/Textures/" + item + ".jpg"
        });
      }
      _ref1 = this.anims;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        items.push({
          id: item,
          src: "data/Textures/Anims/" + item + ".png"
        });
      }
      _ref2 = this.effects;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        item = _ref2[_k];
        items.push({
          id: item,
          src: "data/Textures/Effects/" + item
        });
      }
      _ref3 = this.moto;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        item = _ref3[_l];
        items.push({
          id: item,
          src: "data/Textures/Riders/" + item + ".png"
        });
      }
      items = this.remove_duplicate_textures(items);
      for (_m = 0, _len4 = items.length; _m < _len4; _m++) {
        item = items[_m];
        $("#assets").append("<img id=\"" + item.id + "\" src=\"" + item.src + "\"/>");
      }
      items = [];
      console.log("salut fin de chargement ");
      return console.log("fin");
    };

    Assets.prototype.get = function(name) {
      if (name.length > 0) {
        return document.getElementById(name);
      } else {
        return document.getElementById('cog2');
      }
    };

    Assets.prototype.remove_duplicate_textures = function(array) {
      var found, image, unique, unique_image, _i, _j, _len, _len1;
      unique = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        image = array[_i];
        found = false;
        for (_j = 0, _len1 = unique.length; _j < _len1; _j++) {
          unique_image = unique[_j];
          if (image.id === unique_image.id) {
            found = true;
          }
        }
        if (!found) {
          unique.push(image);
        }
      }
      return unique;
    };

    return Assets;

  })();

  Math2D = (function() {
    function Math2D() {}

    Math2D.distance_between_points = function(point1, point2) {
      var a, b;
      a = Math.pow(point1.x - point2.x, 2);
      b = Math.pow(point1.y - point2.y, 2);
      return Math.sqrt(a + b);
    };

    Math2D.angle_between_points = function(point1, point2) {
      var adj, angle, opp;
      adj = point2.x - point1.x;
      opp = point2.y - point1.y;
      angle = Math.abs(Math.atan(opp / adj) * 180 / Math.PI);
      if (adj > 0 && opp < 0) {
        angle = 90 - angle;
      } else if (adj >= 0 && opp >= 0) {
        angle += 90;
      } else if (adj < 0 && opp >= 0) {
        angle = 180 + (90 - angle);
      } else {
        angle += 270;
      }
      return angle * Math.PI / 180.0;
    };

    Math2D.rotate_point = function(point, angle, rotation_axe) {
      var new_point;
      return new_point = {
        x: rotation_axe.x + point.x * Math.cos(angle) - point.y * Math.sin(angle),
        y: rotation_axe.y + point.x * Math.sin(angle) + point.y * Math.cos(angle)
      };
    };

    Math2D.not_collinear_vertices = function(vertices) {
      var i, size, vertex, _i, _len;
      size = vertices.length;
      for (i = _i = 0, _len = vertices.length; _i < _len; i = ++_i) {
        vertex = vertices[i];
        if (vertex.x === vertices[(i + 1) % size].x && vertices[(i + 2) % size].x) {
          vertex.x = vertex.x + 0.001;
          vertices[(i + 1) % size].x = vertex.x - 0.001;
        }
        if (vertex.y === vertices[(i + 1) % size].y && vertices[(i + 2) % size].y) {
          vertex.y = vertex.y + 0.001;
          vertices[(i + 1) % size].y = vertex.y - 0.001;
        }
      }
      return false;
    };

    return Math2D;

  })();

  MotoFlip = (function() {
    function MotoFlip() {}

    MotoFlip.execute = function(moto) {
      var body, left_axle, left_wheel, level, lower_arm, lower_leg, mirror, right_axle, right_wheel, torso, upper_arm, upper_leg;
      body = {
        position: moto.body.GetPosition(),
        angle: moto.body.GetAngle(),
        linear: moto.body.GetLinearVelocity(),
        angular: moto.body.GetAngularVelocity()
      };
      left_wheel = {
        position: moto.left_wheel.GetPosition(),
        angle: moto.left_wheel.GetAngle(),
        linear: moto.left_wheel.GetLinearVelocity(),
        angular: moto.left_wheel.GetAngularVelocity()
      };
      right_wheel = {
        position: moto.right_wheel.GetPosition(),
        angle: moto.right_wheel.GetAngle(),
        linear: moto.right_wheel.GetLinearVelocity(),
        angular: moto.right_wheel.GetAngularVelocity()
      };
      left_axle = {
        position: moto.left_axle.GetPosition(),
        angle: moto.left_axle.GetAngle(),
        linear: moto.left_axle.GetLinearVelocity(),
        angular: moto.left_axle.GetAngularVelocity()
      };
      right_axle = {
        position: moto.right_axle.GetPosition(),
        angle: moto.right_axle.GetAngle(),
        linear: moto.right_axle.GetLinearVelocity(),
        angular: moto.right_axle.GetAngularVelocity()
      };
      torso = {
        position: moto.rider.torso.GetPosition(),
        angle: moto.rider.torso.GetAngle(),
        linear: moto.rider.torso.GetLinearVelocity(),
        angular: moto.rider.torso.GetAngularVelocity()
      };
      lower_leg = {
        position: moto.rider.lower_leg.GetPosition(),
        angle: moto.rider.lower_leg.GetAngle(),
        linear: moto.rider.lower_leg.GetLinearVelocity(),
        angular: moto.rider.lower_leg.GetAngularVelocity()
      };
      upper_leg = {
        position: moto.rider.upper_leg.GetPosition(),
        angle: moto.rider.upper_leg.GetAngle(),
        linear: moto.rider.upper_leg.GetLinearVelocity(),
        angular: moto.rider.upper_leg.GetAngularVelocity()
      };
      lower_arm = {
        position: moto.rider.lower_arm.GetPosition(),
        angle: moto.rider.lower_arm.GetAngle(),
        linear: moto.rider.lower_arm.GetLinearVelocity(),
        angular: moto.rider.lower_arm.GetAngularVelocity()
      };
      upper_arm = {
        position: moto.rider.upper_arm.GetPosition(),
        angle: moto.rider.upper_arm.GetAngle(),
        linear: moto.rider.upper_arm.GetLinearVelocity(),
        angular: moto.rider.upper_arm.GetAngularVelocity()
      };
      mirror = moto.mirror === 1;
      level = moto.level;
      moto.destroy();
      moto = new Moto(level, mirror);
      moto.init();
      moto.body.SetPosition(body.position);
      moto.body.SetAngle(body.angle);
      moto.body.SetLinearVelocity(body.linear);
      moto.body.SetAngularVelocity(body.angular);
      moto.left_wheel.SetPosition(right_wheel.position);
      moto.left_wheel.SetAngle(left_wheel.angle);
      moto.left_wheel.SetLinearVelocity(left_wheel.linear);
      moto.left_wheel.SetAngularVelocity(left_wheel.angular);
      moto.right_wheel.SetPosition(left_wheel.position);
      moto.right_wheel.SetAngle(right_wheel.angle);
      moto.right_wheel.SetLinearVelocity(right_wheel.linear);
      moto.right_wheel.SetAngularVelocity(right_wheel.angular);
      moto.left_axle.SetPosition(left_axle.position);
      moto.left_axle.SetAngle(left_axle.angle);
      moto.left_axle.SetLinearVelocity(left_axle.linear);
      moto.left_axle.SetAngularVelocity(left_axle.angular);
      moto.right_axle.SetPosition(right_axle.position);
      moto.right_axle.SetAngle(right_axle.angle);
      moto.right_axle.SetLinearVelocity(right_axle.linear);
      moto.right_axle.SetAngularVelocity(right_axle.angular);
      moto.rider.torso.SetPosition(torso.position);
      moto.rider.torso.SetAngle(torso.angle);
      moto.rider.torso.SetLinearVelocity(torso.linear);
      moto.rider.torso.SetAngularVelocity(torso.angular);
      moto.rider.lower_leg.SetPosition(lower_leg.position);
      moto.rider.lower_leg.SetAngle(lower_leg.angle);
      moto.rider.lower_leg.SetLinearVelocity(lower_leg.linear);
      moto.rider.lower_leg.SetAngularVelocity(lower_leg.angular);
      moto.rider.upper_leg.SetPosition(upper_leg.position);
      moto.rider.upper_leg.SetAngle(upper_leg.angle);
      moto.rider.upper_leg.SetLinearVelocity(upper_leg.linear);
      moto.rider.upper_leg.SetAngularVelocity(upper_leg.angular);
      moto.rider.lower_arm.SetPosition(lower_arm.position);
      moto.rider.lower_arm.SetAngle(lower_arm.angle);
      moto.rider.lower_arm.SetLinearVelocity(lower_arm.linear);
      moto.rider.lower_arm.SetAngularVelocity(lower_arm.angular);
      moto.rider.upper_arm.SetPosition(upper_arm.position);
      moto.rider.upper_arm.SetAngle(upper_arm.angle);
      moto.rider.upper_arm.SetLinearVelocity(upper_arm.linear);
      moto.rider.upper_arm.SetAngularVelocity(upper_arm.angular);
      return moto;
    };

    return MotoFlip;

  })();

  Theme = (function() {
    function Theme(file_name) {
      var theme;
      this.sprites = [];
      this.edges = [];
      theme = $("#theme").text();
      console.log(theme);
      this.load_theme(theme);
    }

    Theme.prototype.load_theme = function(xml) {
      var xml_sprite, xml_sprites, _i, _len, _results;
      xml_sprites = $(xml).find('sprite');
      _results = [];
      for (_i = 0, _len = xml_sprites.length; _i < _len; _i++) {
        xml_sprite = xml_sprites[_i];
        if ($(xml_sprite).attr('type') === 'Entity') {
          _results.push(this.sprites[$(xml_sprite).attr('name').toLowerCase()] = {
            file: $(xml_sprite).attr('file'),
            file_base: $(xml_sprite).attr('fileBase'),
            file_ext: $(xml_sprite).attr('fileExtension'),
            size: {
              width: parseFloat($(xml_sprite).attr('width')),
              height: parseFloat($(xml_sprite).attr('height'))
            },
            center: {
              x: parseFloat($(xml_sprite).attr('centerX')),
              y: parseFloat($(xml_sprite).attr('centerY'))
            },
            frames: $(xml_sprite).find('frame').length,
            delay: parseFloat($(xml_sprite).attr('delay'))
          });
        } else if ($(xml_sprite).attr('type') === 'EdgeEffect') {
          _results.push(this.edges[$(xml_sprite).attr('name').toLowerCase()] = {
            file: $(xml_sprite).attr('file').toLowerCase(),
            scale: parseFloat($(xml_sprite).attr('scale')),
            depth: parseFloat($(xml_sprite).attr('depth'))
          });
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Theme.prototype.sprite_params = function(name) {
      return this.sprites[name];
    };

    Theme.prototype.edge_params = function(name) {
      return this.edges[name];
    };

    return Theme;

  })();

}).call(this);
